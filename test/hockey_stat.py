# -*- coding: utf-8 -*-
"""Hockey_stat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p2ecTDAtBkK9NFgz5VvsbDQbHJyhJpTB

#데이터 정리
"""

import pandas as pd
import numpy as np
from glob import glob
import os
import natsort


"""## 시트지를 선수 종류 별로 분류

### player
"""

def player_stat(data, team_name):
  plate = pd.DataFrame(columns=['등번호','이름','포지션','포인트','Y-N','GWS','골',
                              '어시','+','-','+/-','SOG',
                              'PPG','PPA','SHG','SHA','GWG','GBG','GTG','ENG',
                              'PIM','BPIM','Face-off','Face-off win','Percentage Faceoff'],
                       index=range(25))
  
  ######   value area -> 0    ######
  plate.iloc[:-3,3:22] = plate.iloc[:-3,3:22].fillna(0)

  ##################################
  ######   각 팀의 시작위치 탐색   ######
  ##################################
  team = 0

  for i in range(len(data)):
    if team_name in str(data.iloc[i,0]): 
      team = i
  
  ##################################
  ######    팀 플레이트에 옮기기   ######
  ######   pos & num & (Y,N)  ######
  ##################################
  play = 0
  
  for i in range(team+2,team+25):
    if data.iloc[i,7] == 'G':
      continue;
    else:
      plate.iloc[play,0] = data.iloc[i,0]    #num
      plate.iloc[play,2] = data.iloc[i,7]    #pos
      plate.iloc[play,4] = data.iloc[i,8]    #Y,N
      plate.iloc[play,11] = data.iloc[i,9]   #SoG
      play += 1
  
  ######    data 따로 분리하기    ######
  data_player = data.iloc[team:team+25,:]

  return plate, data_player

"""### goalie"""

def goalie_stat(data, team_name):
  plate = pd.DataFrame(columns=['팀','등번호','이름','ice time','shootout','승','연장승','패','연장패','실점',
                                '유효슈팅 허용','유효슈팅 선방','방어율','+','-','+/-','PIM','SO횟수','SO방어','SO방어율'],
                       index=range(5))

  ##################################
  ######   각 팀의 시작위치 탐색   ######
  ##################################
  team = 0

  for i in range(len(data)):
    if team_name in str(data.iloc[i,0]): 
      team = i

  ##################################
  ######    팀 플레이트에 옮기기   ######
  ######   pos & num & (Y,N)  ######
  ##################################
  goalie = 0
  
  for i in range(team+2,team+25):
    if data.iloc[i,7] == 'G':
      plate.iloc[goalie,0] = team_name    #team
      plate.iloc[goalie,1] = data.iloc[i,0]    #num
      plate.iloc[goalie,10] = data.iloc[i,9]   #SoG
      goalie += 1

  return plate


"""
## Player info

### 골 및 어시스트, +/-
"""

def goal(data, plate):
  for i in range(2,len(data)):              #goal을 search
    goal = data.iloc[i,14] 
    goal_state = data.iloc[i,20]
    
    if goal_state == 'EQ':
      plate.loc[plate['등번호']==goal, '골'] += 1
    elif goal_state == 'GWS':
      plate.loc[plate['등번호']==goal, '골'] += 1
    elif goal_state == 'EN':
      plate.loc[plate['등번호']==goal, 'ENG'] += 1
      plate.loc[plate['등번호']==goal, '골'] += 1
    elif goal_state > 0:
      plate.loc[plate['등번호']==goal, 'PPG'] += 1
      plate.loc[plate['등번호']==goal, '골'] += 1
    elif goal_state < 0:
      plate.loc[plate["등번호"]==goal, "SHG"] += 1
      plate.loc[plate['등번호']==goal, '골'] += 1
    else: continue

def assist(data, plate):
  for i in range(2,len(data)):              # search
    assist1 = data.iloc[i,16] 
    assist2 = data.iloc[i,18]
    goal_state = data.iloc[i,20]
    
    if goal_state == 'EQ':
      plate.loc[plate['등번호']==assist1, '어시'] += 1
      plate.loc[plate['등번호']==assist2, '어시'] += 1
    elif goal_state == 'GWS':
      plate.loc[plate['등번호']==assist1, '어시'] += 1
      plate.loc[plate['등번호']==assist2, '어시'] += 1
    elif goal_state == 'EN':
      plate.loc[plate['등번호']==assist1, '어시'] += 1
      plate.loc[plate['등번호']==assist2, '어시'] += 1
    elif goal_state > 0:
      plate.loc[plate['등번호']==assist1, 'PPA'] += 1
      plate.loc[plate['등번호']==assist2, 'PPA'] += 1
      plate.loc[plate['등번호']==assist1, '어시'] += 1
      plate.loc[plate['등번호']==assist2, '어시'] += 1
    elif goal_state < 0:
      plate.loc[plate["등번호"]==assist1, "SHA"] += 1
      plate.loc[plate["등번호"]==assist2, "SHA"] += 1
      plate.loc[plate['등번호']==assist1, '어시'] += 1
      plate.loc[plate['등번호']==assist2, '어시'] += 1
    else: continue


def plus(data, plate):
  for i in range(2,len(data)):
    goals = data.iloc[i,21:27]
    for j in range(len(goals)):
      plate.loc[plate["등번호"] == goals.values[j],"+"] += 1

def minus(data_enemy, plate):
  for i in range(2,len(data_enemy)):
    loss = data_enemy.iloc[i,27:33]
    for j in range(len(loss)):
      plate.loc[plate["등번호"] == loss.values[j],"-"] += 1

"""### - 전체 경기 판도 파악을 위한 goal stack"""

#from datetime import datetime
def get_sec(time_str):
    """Get Seconds from time."""
    m, s = time_str.split(':')
    return int(m) * 60 + int(s)

def goal_stack(data1, data2, plate1, plate2):
  gt_A = data1.iloc[:,11].fillna(-1)
  gt_B = data2.iloc[:,11].fillna(-1)
  i_a=2
  i_b=2
  i=0
  tot = pd.DataFrame(columns=['time','team','num'])#, index=range(20))
  #for i in range(len(gt_A)+len(gt_B)):
  while (gt_A.values[i_a] != -1) and (gt_B.values[i_b] != -1):
    a = get_sec(gt_A.values[i_a])
    b = get_sec(gt_B.values[i_b])
    compare = a - b
    if compare < 0:           # b의 골이 a보다 나중에 발생했다
      tot.loc[i] = [gt_A.values[i_a], 'A', data1.loc[data1[11]==gt_A.values[i_a],14].values[0]]
      i_a += 1
      i += 1
    elif compare > 0:
      tot.loc[i] = [gt_B.values[i_b], 'B', data2.loc[data2[11]==gt_B.values[i_b],14].values[0]]
      i_b += 1
      i += 1
  
  while gt_A.values[i_a] != -1:
    #a = datetime.strptime(gt_A.values[i_a], "%M:%S")
    tot.loc[i] = [gt_A.values[i_a], 'A', data1.loc[data1[11]==gt_A.values[i_a], 14].values[0]]
    i_a += 1
    i += 1

  while gt_B.values[i_b] != -1:
    #b = datetime.strptime(gt_B.values[i_b], "%M:%S")
    tot.loc[i] = [gt_B.values[i_b], 'B', data2.loc[data2[11]==gt_B.values[i_b], 14].values[0]]
    i_b += 1
    i += 1
  
  return tot

"""### detail goal info."""

def goal_detail_info(goal_stack, plate_A, plate_B):
  goal_A = 0
  goal_B = 0
  current_winning = 0   #+1 = A, 0 = tie -1 = B
  GWG = 0 
  for i in range(len(goal_stack)): 
    if goal_stack.loc[i,'team'] == 'A':
      goal_A += 1
      if goal_A == goal_B:      # tie score
        plate_A.loc[plate_A['등번호']==goal_stack.loc[i,'num'],'GTG'] += 1
        current_winning = 0
        GWG = 0
      elif goal_A > goal_B and current_winning != 1:     # tie break
        if goal_stack.loc[i,'time'] != '65:00':
          plate_A.loc[plate_A['등번호']==goal_stack.loc[i,'num'],'GBG'] += 1
        else:
          plate_B.loc[plate_B['등번호']==goal_stack.loc[i,'num'],'GWS'] += 1
        GWG = goal_stack.loc[i,'num']
        current_winning = 1
      else: continue

    elif goal_stack.loc[i,'team'] == 'B':
      goal_B += 1
      if goal_B == goal_A:      # tie score
        plate_B.loc[plate_B['등번호']==goal_stack.loc[i,'num'],'GTG'] += 1
        current_winning = 0
        GWG = 0
      elif goal_B > goal_A and current_winning != -1:     # tie break
        if goal_stack.loc[i,'time'] != '65:00':
          plate_B.loc[plate_B['등번호']==goal_stack.loc[i,'num'],'GBG'] += 1
        else:
          plate_B.loc[plate_B['등번호']==goal_stack.loc[i,'num'],'GWS'] += 1
        GWG = goal_stack.loc[i,'num']
        current_winning = -1
      else: continue
  
  if current_winning == 1:
    plate_A.loc[plate_A['등번호']==GWG,'GWG'] += 1
  elif current_winning == -1:
    plate_B.loc[plate_B['등번호']==GWG,'GWG'] += 1

#PIM
def penalty(data, plate):
  for i in range(2,24):
    penalty_num = data.iloc[i,35]
    penalty_time = data.iloc[i,36]
    plate.loc[plate['등번호']==penalty_num,'PIM'] += penalty_time

"""## Goalie info"""



"""## 나눈 섹션을 merge""" #나중에 골리도 여기에 추가해야됨 

#merge
def merge_player(plate_A, plate_B):
  result = pd.DataFrame(columns=['등번호','이름','포지션','포인트','Y-N','GWS','골',
                              '어시','+','-','+/-','SOG',
                              'PPG','PPA','SHG','SHA','GWG','GBG','GTG','ENG',
                              'PIM','BPIM','Face-off','Face-off win','Percentage Faceoff'],
                       index=range(70))
  
  for i in range(1,len(plate_A)+1):
    result.loc[i]=plate_A.loc[i-1]
  for i in range(31,len(plate_B)+31):
    result.loc[i]=plate_B.loc[i-31]
  return result

"""### detail 추가"""

def sheet_detail(input, dataA, dataB):
  input.iloc[25,1:5] =  ['횟수', '득점', '실점', '비율']
  input.iloc[55,1:5] =  ['횟수', '득점', '실점', '비율']
  input.iloc[26:28,0] = ['Power play', 'Penalty killing'] 
  input.iloc[56:58,0] = ['Power play', 'Penalty killing']
  input.iloc[26:28,1:5] = input.iloc[26:28,1:5].fillna(0)
  input.iloc[56:58,1:5] = input.iloc[56:58,1:5].fillna(0)

  #penalty 수 세고, ppg, shg 세서 득,실점 상황 확인
  pen_A = dataA.iloc[2:,36]
  pen_A = pen_A.fillna(-1)
  pen_B = dataB.iloc[2:,36]
  pen_B = pen_B.fillna(-1)

  #penalty 수         p_a = A의 penalty killing 수 = B의 powerplay수
  i_a, p_a = 0, 0
  i_b, p_b = 0, 0 
  while pen_A[pen_A.index[i_a]] != -1:
    if pen_A[pen_A.index[i_a]] < 10: 
      p_a += 1
    i_a += 1
  while pen_B[pen_B.index[i_b]] != -1:
    if pen_B[pen_B.index[i_b]] < 10:
      p_b += 1
    i_b += 1

  #PPG, SHG 추출
  lst_ppgA = input.loc[1:26,'PPG'].fillna(0)
  ppgA = 0
  for i in range(len(lst_ppgA)):
    ppgA += lst_ppgA[lst_ppgA.index[i]]

  lst_shgA = input.loc[1:26,'SHG'].fillna(0)
  shgA = 0
  for i in range(len(lst_shgA)):
    shgA += lst_shgA[lst_shgA.index[i]]

  lst_ppgB = input.loc[31:56,'PPG'].fillna(0)
  ppgB = 0
  for i in range(len(lst_ppgB)):
    ppgB += lst_ppgB[lst_ppgB.index[i]]
  
  lst_shgB = input.loc[31:56,'SHG'].fillna(0)
  shgB = 0
  for i in range(len(lst_shgB)):
    shgB += lst_shgB[lst_shgB.index[i]]

  #result의 알맞는 위치에 값 집어넣기
  input.iloc[26,1:5]= p_b, ppgA, shgB, 100*ppgA/p_b
  input.iloc[27,1:5]= p_a, shgA, ppgB, 100*(p_a-ppgB)/p_a

  input.iloc[56,1:5]= p_a, ppgB, shgA, 100*ppgB/p_a
  input.iloc[57,1:5]= p_b, shgB, ppgA, 100*(p_b-ppgA)/p_b

  return input



def main(input_file, i):

  data = pd.read_excel(os.path.join('./league_sheet/',input_file), header=None) 

  #sheet spliting
  player_A, data_A = player_stat(data, '(A)')
  player_B, data_B = player_stat(data, '(B)')
  goalie_A = goalie_stat(data, '(A)')
  goalie_B = goalie_stat(data, '(B)') 

  #goal, assist
  goal(data_A, player_A)
  assist(data_A, player_A)
  goal(data_B, player_B)
  assist(data_B, player_B)
  player_A['포인트'] = player_A['골'] + player_A['어시']
  player_B['포인트'] = player_B['골'] + player_B['어시']

  #+/-
  plus(data_A, player_A)
  plus(data_B, player_B)
  minus(data_B, player_A)
  minus(data_A, player_B)
  player_A['+/-'] = player_A['+'] - player_A['-']
  player_B['+/-'] = player_B['+'] - player_B['-']

  #detail goal info
  stack = goal_stack(data_A, data_B, player_A, player_B)
  goal_detail_info(stack, player_A, player_B)

  #penalty
  penalty(data_A, player_A)
  penalty(data_B, player_B)

  #merge
  res = merge_player(player_A, player_B)
  #add sheet detail
  result = sheet_detail(res, data_A, data_B)

  #save file
  save_dir = './result/result'+str(i)+'.xlsx'
  result.to_excel(save_dir)
  save_dir2 = './result_csv/result'+str(i)+'.csv'
  result.to_csv(save_dir2)

files = os.listdir('./league_sheet')
files = natsort.natsorted(files)
print(files)
for i, file in enumerate(files):
  print(file)
  main(file, i+1)